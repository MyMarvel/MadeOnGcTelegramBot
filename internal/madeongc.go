package madeongc

import (
	"MyMarvel/MadeOnGcTelegramBot/pkg/sequencedchat"
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
	"os"
	"strconv"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/chromedp/chromedp"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"golang.org/x/net/html"

	"github.com/rs/zerolog/log"
)

type MadeOnGCLogic struct {
	sequencedchat.StepsHandler
}

// STAGE NAMES
const (
	START              = "–ü–µ—Ä–≤—ã–π —ç–∫—Ä–∞–Ω"
	SEND_WEBSITE_LINK  = "–ñ–¥–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç"
	SEND_WEBSITE_DESC  = "–ñ–¥–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å–∞–π—Ç–∞"
	FINISH             = "–ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–∫—Ä–∞–Ω"
	IS_WEBSITE_YOURS   = "–í—ã –∞–≤—Ç–æ—Ä?"
	CONFIRM_OWNERSHIP  = "–ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–≤—Ç–æ—Ä—Å—Ç–≤–∞"
	SHOW_PREVIEW       = "–ì–æ—Ç–æ–≤–∏–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç"
	SEND_TO_MODERATION = "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ"
	EDIT_WARNING       = "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —á—Ç–æ –≤—Å–µ —Å–±—Ä–æ—Å–∏—Ç—Å—è"
	OWNERSHIP_SUCCESS  = "–£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –≤–ª–∞–¥–µ–Ω–∏–µ —Å–∞–π—Ç–æ–º"
	OWNERSHIP_FAILED   = "–ú–µ—Ç–∞ —Ç–µ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω"
)

// BUTTONS
const (
	YES                = "–î–∞"
	NO                 = "–ù–µ—Ç"
	SEND               = "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"
	EDIT               = "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
	YES_EDIT_WARN      = "–î–∞, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º"
	NO_EDIT_WARN       = "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–∞–∫"
	OWNER_READY        = "–ì–æ—Ç–æ–≤–æ"
	OWNER_CANCEL       = "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
	OWNER_READY_AGAIN  = "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ"
	OWNER_CANCEL_AGAIN = "–ë–µ–∑ –∞–≤—Ç–æ—Ä—Å—Ç–≤–∞"
	REDIRECT           = ""
)

func New() *MadeOnGCLogic {
	staticLogic := map[string]map[string]string{
		"": {
			"/start": START,
		},
		START: {
			"–ù–∞—á–∞—Ç—å": SEND_WEBSITE_LINK,
		},
		SEND_WEBSITE_LINK: {
			"any": SEND_WEBSITE_DESC, //any is a reserved word for any input.
		},
		SEND_WEBSITE_DESC: {
			"any": IS_WEBSITE_YOURS,
		},
		IS_WEBSITE_YOURS: {
			YES: CONFIRM_OWNERSHIP,
			NO:  SHOW_PREVIEW,
		},
		SHOW_PREVIEW: {
			SEND: SEND_TO_MODERATION,
			EDIT: EDIT_WARNING,
		},
		EDIT_WARNING: {
			YES_EDIT_WARN: SEND_WEBSITE_LINK,
			NO_EDIT_WARN:  SEND_TO_MODERATION,
		},
		SEND_TO_MODERATION: {
			"any": FINISH,
		},
		CONFIRM_OWNERSHIP: {
			OWNER_READY:  OWNERSHIP_SUCCESS,
			OWNER_CANCEL: SHOW_PREVIEW,
		},
		OWNERSHIP_FAILED: {
			OWNER_READY_AGAIN:  OWNERSHIP_SUCCESS,
			OWNER_CANCEL_AGAIN: SHOW_PREVIEW,
		},
		OWNERSHIP_SUCCESS: {
			REDIRECT: SHOW_PREVIEW,
		},
		FINISH: {
			"any": FINISH,
		},
	}
	steps := map[string]sequencedchat.LogicStep{
		START: {
			Text: `–ü—Ä–∏–≤–µ—Ç!

–Ø ‚Äî –±–æ—Ç Made on GC  üëã
–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∞–π—Ç –≤ –∫–∞–Ω–∞–ª @madeongc. 

–ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –≤—ã –Ω–∞–∂–º–µ—Ç–µ –Ω–∞ ¬´–ù–∞—á–∞—Ç—å¬ª, —è —Å–ø—Ä–æ—à—É —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç, —Å–ø—Ä–æ—à—É –æ–ø–∏—Å–∞–Ω–∏–µ —Å–∞–π—Ç–∞ –∏ —Å–¥–µ–ª–∞—é –µ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç.

–ï—Å–ª–∏ –≤—ã –ø—Ä–æ—Å—Ç–æ –Ω–∞—à–ª–∏ –∫–ª–∞—Å—Å–Ω—ã–π —Å–∞–π—Ç, —è –≤—ã–ª–æ–∂—É –µ–≥–æ –±–µ–∑ –ø–æ–º–µ—Ç–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞. –ï—Å–ª–∏ –≤—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, —ç—Ç–æ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Å—Ç–∞–≤–∫–æ–π –º–µ—Ç–∞-—Ç–µ–≥–∞ –Ω–∞ —Å–∞–π—Ç–µ.

–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞—à–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –ø—Ä–æ–≤–µ—Ä—è—Ç –∏ –æ–ø—É–±–ª–∏–∫—É—é—Ç —Å–∞–π—Ç –≤ –∫–∞–Ω–∞–ª–µ. 

–ù–∞–∂–º–∏—Ç–µ ¬´–ù–∞—á–∞—Ç—å¬ª üëá
`,
			Buttons: []string{"–ù–∞—á–∞—Ç—å"},
		},
		SEND_WEBSITE_LINK: {
			Text: `–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç`,
		},
		SEND_WEBSITE_DESC: {
			Text: `–ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ —Å–∞–π—Ç–µ (–Ω–µ –±–æ–ª–µ–µ 140 —Å–∏–º–≤–æ–ª–æ–≤)`,
		},
		IS_WEBSITE_YOURS: {
			Text: `–ë–æ—Ç —É—à—ë–ª –¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç ‚è≥

–ê –ø–æ–∫–∞ –¥–∞–≤–∞–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏–º –∞–≤—Ç–æ—Ä—Å—Ç–≤–æ. –í—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —ç—Ç–æ–≥–æ —Å–∞–π—Ç–∞?`,
			Buttons: []string{YES, NO},
		},
		SHOW_PREVIEW: {
			Text:    `–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é?`,
			Buttons: []string{SEND, EDIT},
		},
		EDIT_WARNING: {
			Text:    `–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç, –Ω–∞–¥–æ –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤—Å—ë –∑–∞–Ω–æ–≤–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º?`,
			Buttons: []string{YES_EDIT_WARN, NO_EDIT_WARN},
		},
		SEND_TO_MODERATION: {
			Text: "–ó–∞–±—Ä–∞–ª–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é ‚ù§Ô∏è \n–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª–∏—Å—å —Å–∞–π—Ç–æ–º!",
		},
		CONFIRM_OWNERSHIP: {
			Text:    `Blank message to be replaced`,
			Buttons: []string{OWNER_READY, OWNER_CANCEL},
		},
		OWNERSHIP_FAILED: {
			Text:    "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –º–µ—Ç–∞ —Ç–µ–≥, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å",
			Buttons: []string{OWNER_READY_AGAIN, OWNER_CANCEL_AGAIN},
		},
		OWNERSHIP_SUCCESS: {
			Text:     "–û—Ç–ª–∏—á–Ω–æ, –º—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –∞–≤—Ç–æ—Ä—Å—Ç–≤–æ —Å–∞–π—Ç–∞, –º—ã –¥–æ–±–∞–≤–∏–º –≤–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º-–Ω–∏–∫ –≤ –ø–æ—Å—Ç.",
			Redirect: true,
		},
		FINISH: {
			Text: "–°–ø–∞—Å–∏–±–æ!",
		},
	}

	return &MadeOnGCLogic{
		StepsHandler: sequencedchat.StepsHandler{
			StaticLogic:        staticLogic,
			Steps:              steps,
			DynamicStepActions: dynamicStepActions,
			DeveloperErrorText: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ –Ω–µ–π –≤ –Ω–∞—à—É —Ä–µ–¥–∞–∫—Ü–∏—é.",
			WhenNotFoundText:   "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª–∞.",
		},
	}
}

/**
 * This function allow to override some steps and their messages.
 * In case a stage name is matched and user entered/clicked on a correct button, a special stage will be returned.
 * If we do not want to change a stage but just change a returned message, we return true, theSameStepName, and a new message.
 * We can send multiple messages to chat and only then return some stage - in this case the stage message will appear in the end.
 * When we return empty overrideText (""), we'll use the default stage text from the steps map.
 */
var dynamicStepActions = func(c *sequencedchat.Chat, userInput string, bot *tgbotapi.BotAPI) (doOverride bool, newStepName string, overrideText string) {
	theSameStepName := c.CurrentStage

	switch true {

	case SEND_WEBSITE_LINK == c.CurrentStage:
		errMsg := "–ú—ã –Ω–µ –º–æ–∂–µ–º –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π —Å–∞–π—Ç, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å, –≤–æ–∑–º–æ–∂–Ω–æ –æ—à–∏–±–ª–∏—Å—å —Å http –∏–ª–∏ —Å–ø–µ—Ü. —Å–∏–º–≤–æ–ª–∞–º–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
		u, err := url.Parse(userInput)
		if err == nil && u.Scheme != "" && u.Host != "" {
			res, err := http.Get(userInput)
			if err != nil {
				log.Error().Err(err).Msg("error making http request")
				return true, theSameStepName, errMsg
			}

			if res.StatusCode != http.StatusOK && res.StatusCode != http.StatusPermanentRedirect && res.StatusCode != http.StatusMovedPermanently {
				return true, theSameStepName, errMsg
			}

			c.ChatData["link"] = userInput
		} else {
			return true, theSameStepName, errMsg
		}

	case SEND_WEBSITE_DESC == c.CurrentStage:
		if utf8.RuneCountInString(userInput) <= 140 {
			c.ChatData["desc"] = userInput
		} else {
			return true, theSameStepName, "–í–∞—à —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
		}

	case CONFIRM_OWNERSHIP == c.CurrentStage && userInput == OWNER_CANCEL:
		fallthrough
	case OWNERSHIP_FAILED == c.CurrentStage && userInput == OWNER_CANCEL_AGAIN:
		fallthrough
	case OWNERSHIP_SUCCESS == c.CurrentStage && userInput == REDIRECT:
		fallthrough
	case IS_WEBSITE_YOURS == c.CurrentStage && userInput == NO:
		for k, v := range c.ChatData {
			log.Trace().Msgf("ChatData[%s] = %s", k, v)
		}

		msg := tgbotapi.NewMessage(c.ChatId, "–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä ‚è≥")
		if _, err := bot.Send(msg); err != nil {
			log.Error().Err(err)
		}

		ctx, cancel := chromedp.NewContext(context.Background())
		defer cancel()

		var buf []byte
		if err := chromedp.Run(ctx,
			chromedp.EmulateViewport(1920, 1080),
			chromedp.Navigate(c.ChatData["link"].(string)),
			chromedp.CaptureScreenshot(&buf),
		); err != nil {
			log.Fatal().Err(err)
			return
		}

		filename := time.Now().Format("2006-01-02-15-04-05-00") + ".jpg"
		filepath := os.Getenv("SCREENSHOTS_FOLDER") + "/" + filename
		if err := ioutil.WriteFile(filepath, buf, 0644); err != nil {
			log.Fatal().Err(err)
		}

		c.ChatData["screen"] = filename
		sendCompletedWebsite(c.ChatId, c, bot)

		return true, SHOW_PREVIEW, ""

	case SHOW_PREVIEW == c.CurrentStage && userInput == SEND:
		fallthrough
	case EDIT_WARNING == c.CurrentStage && userInput == NO_EDIT_WARN:
		// TODO: Save this to our database
		// Send it to our moderation bot
		moderationChat, err := strconv.ParseInt(os.Getenv("MODERATION_CHAT_ID"), 10, 64)
		if err != nil {
			log.Error().Err(err).Msg("cannot convert MODERATION_CHAT_ID env var to int64")
			return
		}
		sendCompletedWebsite(moderationChat, c, bot)

	case IS_WEBSITE_YOURS == c.CurrentStage && userInput == YES:
		msg := `–û—Ç–ª–∏—á–Ω–æ!

–ß—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, —á—Ç–æ –≤—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—Å—Ç–∞–≤—å—Ç–µ –º–µ—Ç–∞-—Ç–µ–≥ —Å –≤–∞—à–∏–º –Ω–∏–∫–æ–º –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ –≤ head —Å–∞–π—Ç–∞.
–ë–æ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç –µ–≥–æ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –∞–≤—Ç–æ—Ä—Å—Ç–≤–æ.

–ö–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ head:
<meta author="@{username}">`
		msg = strings.ReplaceAll(msg, "{username}", c.UserName)
		return true, CONFIRM_OWNERSHIP, msg

	case CONFIRM_OWNERSHIP == c.CurrentStage && userInput == OWNER_READY:
		fallthrough
	case OWNERSHIP_FAILED == c.CurrentStage && userInput == OWNER_READY_AGAIN:
		found, err := findMetaTag(c.ChatData["link"].(string), "author", "@"+c.UserName)
		if err != nil {
			log.Error().Err(err).Msg("error making http request")
			return true, theSameStepName, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É."
		}

		if !found {
			return true, OWNERSHIP_FAILED, ""
		} else {
			c.ChatData["dev"] = c.UserName
		}
	}

	return

}

func findMetaTag(url, tagName, tagValue string) (bool, error) {
	// Do check the meta tag
	response, err := http.Get(url)
	if err != nil {
		return false, err
	}
	defer response.Body.Close()

	htmlTokens := html.NewTokenizer(response.Body)
loop:
	for {
		tt := htmlTokens.Next()

		switch tt {
		case html.ErrorToken:
			break loop
		case html.SelfClosingTagToken:
			fallthrough
		case html.StartTagToken:
			tr := htmlTokens.Token()
			if tr.Data == "meta" {
				for _, attr := range tr.Attr {
					if attr.Key == tagName && attr.Val == tagValue {
						log.Debug().Msgf("we found an author %s", tr)
						return true, nil
					}
				}
			}
		}
	}
	return false, nil
}

func sendCompletedWebsite(chatId int64, c *sequencedchat.Chat, bot *tgbotapi.BotAPI) {
	// send as a file
	filepath := os.Getenv("SCREENSHOTS_FOLDER") + "/" + c.ChatData["screen"].(string)
	photo := tgbotapi.NewPhoto(chatId, tgbotapi.FilePath(filepath))
	if _, err := bot.Send(photo); err != nil {
		log.Fatal().Err(err)
	}

	// Send description
	desc := fmt.Sprintf("%s\n%s", c.ChatData["desc"], c.ChatData["link"])
	dev, ok := c.ChatData["dev"]
	if ok {
		desc += fmt.Sprintf("\n–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @%s", dev.(string))
	}
	msg := tgbotapi.NewMessage(chatId, desc)
	if _, err := bot.Send(msg); err != nil {
		log.Error().Err(err)
	}
}
